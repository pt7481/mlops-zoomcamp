name: CD-Deploy
on:
  push:
    branches:
      - develop
    # paths:
    #   - '06-best-practices/**'

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - uses: hashicorp/setup-terraform@v2

      # Define infrastructure
      - name: TF plan
        id: tf-plan
        working-directory: '06-best-practices/infrastructure'
        run: |
          terraform init -backend-config="key=mlops-zoomcamp-prod.tfstate" --reconfigure && terraform plan --var-file=vars/prod.tfvars

      - name: TF apply
        id: tf-apply
        working-directory: '06-best-practices/infrastructure'
        if: ${{ steps.tf-plan.outcome == 'success' }}
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars

          ECR_REPO=$(terraform output -raw ecr_repo)
          LAMBDA_FUNCTION=$(terraform output -raw lambda_function)
          MODEL_BUCKET=$(terraform output -raw model_bucket)
          PREDICTIONS_STREAM=$(terraform output -raw predictions_stream)

          echo "::set-output name=ecr_repo::$ECR_REPO"
          echo "::set-output name=lambda_function::$LAMBDA_FUNCTION"
          echo "::set-output name=model_bucket::$MODEL_BUCKET"
          echo "::set-output name=predictions_stream::$PREDICTIONS_STREAM"

      # Build-Push
      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image 
        id: build-image-step
        working-directory: 06-best-practices/infrastructure
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          IMAGE_TAG: latest
        run: |
          echo "ecr_repo: ${{ steps.tf-apply.outputs.ecr_repo }}"
          echo "lambda_function: ${{ steps.tf-apply.outputs.lambda_function }}"
          echo "model_bucket: ${{ steps.tf-apply.outputs.model_bucket }}"
          echo "predictions_stream: ${{ steps.tf-apply.outputs.predictions_stream }}"

      # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Deploy
      # - name: Get model artifacts
      #   id: get-model-artifacts
      #   working-directory: 06-best-practices
      #   env:
      #     MODEL_BUCKET_DEV: "thoughtswork-co"
      #     MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
      #   run: |
      #     export RUN_ID=$(aws s3api list-objects-v2 --bucket ${MODEL_BUCKET_DEV} \
      #     --query "sort_by(Contents, &LastModified)[-1].Key" --output text | cut -f3 -d/)
      #     aws s3 sync s3://${MODEL_BUCKET_DEV}/mlflow s3://${MODEL_BUCKET_PROD}/mlflow
      #     echo "::set-output name=run_id::${RUN_ID}"

      # - name: Update Lambda function
      #   env:
      #     LAMBDA_FUNCTION: ${{ steps.tf-apply.outputs.lambda_function }}
      #     PREDICTIONS_STREAM_NAME: ${{ steps.tf-apply.outputs.predictions_stream }}
      #     MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
      #     RUN_ID: ${{ steps.get-model-artifacts.outputs.run_id }}
      #     MLFLOW_EXPERIMENT_ID: "4"
      #   run: |
      #     variables="{MLFLOW_EXPERIMENT_ID=${MLFLOW_EXPERIMENT_ID}, PREDICTIONS_STREAM_NAME=${PREDICTIONS_STREAM_NAME}, MODEL_BUCKET=${MODEL_BUCKET_PROD}, RUN_ID=${RUN_ID}}"

      #     STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-east-2" --query 'Configuration.LastUpdateStatus' --output text)
      #       while [[ "$STATE" == "InProgress" ]]
      #       do
      #           echo "sleep 5sec ...."
      #           sleep 5s
      #           STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-east-2" --query 'Configuration.LastUpdateStatus' --output text)
      #           echo $STATE
      #       done

      #     aws lambda update-function-configuration --function-name ${LAMBDA_FUNCTION} \
      #       --environment "Variables=${variables}"